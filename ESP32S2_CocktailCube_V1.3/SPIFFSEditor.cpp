/**
 * Includes all spiffs editor functions
 *
 * @author    Florian Stäblein
 * @date      2025/01/01
 * @copyright © 2025 Florian Stäblein
 */

//===============================================================
// Includes
//===============================================================
#include "SPIFFSEditor.h"

//===============================================================
// Constants
//===============================================================
static const char* TAG = "spiffseditor";

//===============================================================
// Defines
//=============================================================== 
//#define edit_html_gz_len              4405

//===============================================================
// https://mischianti.org/online-converter-file-to-cpp-gzip-byte-array-3/
// File: edit.html.gz, Size: 4400
//===============================================================
//File: edit.html.gz, Size: 4496
#define edit_html_gz_len 4496
const uint8_t edit_html_gz[] PROGMEM = {  
0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xCD, 0x5B, 0xEB, 0x56, 0xDB, 0xC8, 
0xB2, 0xFE, 0x4D, 0xD6, 0xCA, 0x3B, 0x74, 0x94, 0x33, 0x83, 0x3D, 0xF8, 0x86, 0x21, 0x0C, 0x31, 
0x90, 0x8C, 0x6D, 0x4C, 0x20, 0x24, 0xDC, 0x6C, 0x92, 0x90, 0xEC, 0xEC, 0xB3, 0x64, 0xA9, 0x6D, 
0x2B, 0xC8, 0x92, 0x22, 0xB5, 0xC1, 0x4E, 0x36, 0x6F, 0xB3, 0xFF, 0xEC, 0xD7, 0x38, 0xE7, 0xC5, 
0x4E, 0x55, 0x5F, 0xA4, 0x96, 0x2C, 0x1B, 0x86, 0x99, 0x1F, 0x27, 0x0E, 0x58, 0xEA, 0xAE, 0xAE, 
0xAE, 0xAE, 0xAA, 0xFE, 0xAA, 0xFA, 0xC2, 0xEE, 0xB3, 0x72, 0xB9, 0x37, 0x72, 0x22, 0x02, 0xFF, 
0xD9, 0x88, 0x92, 0xC0, 0x35, 0x1D, 0x8F, 0x8C, 0xD8, 0xD8, 0x25, 0x91, 0x3F, 0x09, 0x2D, 0x4A, 
0xFC, 0x01, 0xAF, 0x18, 0xD1, 0x29, 0xA1, 0x9E, 0xE5, 0xDB, 0xD4, 0x26, 0x1D, 0xDB, 0x61, 0x7E, 
0x58, 0x3E, 0x33, 0x87, 0x94, 0xD0, 0x71, 0x9F, 0xDA, 0x58, 0x08, 0xCD, 0xBA, 0x67, 0x47, 0x07, 
0x07, 0x5D, 0x51, 0x5B, 0xB1, 0x82, 0x80, 0x94, 0xCB, 0xAF, 0x9E, 0x3E, 0xD9, 0x7D, 0xB6, 0x7F, 
0xDA, 0xEE, 0x5D, 0x9D, 0x75, 0x38, 0x5B, 0x2C, 0xE0, 0xEC, 0x5D, 0xD3, 0x1B, 0xEE, 0x19, 0xD4, 
0x33, 0xA0, 0x84, 0x90, 0xDD, 0x11, 0x35, 0x6D, 0xFE, 0x04, 0xCF, 0x63, 0xCA, 0x4C, 0x62, 0x8D, 
0xCC, 0x30, 0xA2, 0x6C, 0xCF, 0xB8, 0xEC, 0x1D, 0x94, 0xB7, 0x0D, 0x55, 0xC7, 0x1C, 0xE6, 0xD2, 
0x57, 0x9D, 0xEE, 0x99, 0x94, 0x62, 0xB7, 0x2A, 0x4A, 0xF4, 0xA6, 0x9E, 0x39, 0xA6, 0x7B, 0x86, 
0x4D, 0x23, 0x2B, 0x74, 0x02, 0xE6, 0xF8, 0x9E, 0x41, 0x2C, 0xDF, 0x63, 0xD4, 0x03, 0x6E, 0x6D, 
0xDF, 0xBA, 0x66, 0xA6, 0xE3, 0x8E, 0x9D, 0x29, 0x0D, 0xA5, 0xC4, 0x92, 0x15, 0x29, 0x93, 0xB6, 
0x1F, 0xCC, 0x42, 0x67, 0x38, 0x62, 0xE4, 0x7F, 0xFE, 0x43, 0xEA, 0xB5, 0xFA, 0x26, 0x39, 0x70, 
0xFD, 0xD0, 0x31, 0x61, 0x6C, 0xEC, 0x7F, 0xFF, 0xDD, 0x77, 0xA9, 0xE3, 0x19, 0x39, 0x5D, 0xDD, 
0x38, 0xF4, 0x36, 0xF0, 0x43, 0xA6, 0xF5, 0x33, 0x89, 0x68, 0x58, 0x8E, 0x2C, 0xD3, 0x35, 0xA1, 
0xD5, 0x9E, 0xE7, 0x97, 0x40, 0x41, 0x0E, 0x73, 0x4C, 0x97, 0x17, 0xD2, 0xBD, 0xF5, 0x12, 0x19, 
0x9B, 0x53, 0x67, 0x3C, 0x19, 0x6B, 0x05, 0x40, 0x92, 0x2A, 0xB8, 0x75, 0x6C, 0x36, 0xDA, 0xB3, 
0xE9, 0x8D, 0x63, 0xD1, 0x32, 0x7F, 0x29, 0x81, 0x21, 0x50, 0x3E, 0x55, 0x28, 0xDE, 0x4A, 0x84, 
0x99, 0xE1, 0x90, 0xB2, 0xB2, 0x4D, 0xBD, 0xC8, 0x61, 0x33, 0x3B, 0x70, 0x14, 0x01, 0x3C, 0x1A, 
0x55, 0x29, 0xB2, 0x14, 0x3C, 0x62, 0x33, 0x97, 0x12, 0x36, 0x0B, 0x40, 0x72, 0x46, 0xA7, 0xAC, 
0x6A, 0x45, 0x91, 0x41, 0xC6, 0xD4, 0x76, 0xCC, 0x3D, 0x03, 0x74, 0x46, 0x85, 0x51, 0x9E, 0x3E, 
0xA9, 0x38, 0xDE, 0xC0, 0xEF, 0x01, 0xC5, 0xD3, 0x27, 0x3F, 0xB1, 0x6D, 0x60, 0xDA, 0xB6, 0xE3, 
0x0D, 0xCB, 0x2E, 0x1D, 0xB0, 0x06, 0x59, 0xAF, 0x05, 0xD3, 0x1D, 0x2C, 0x1E, 0xC0, 0x98, 0xCB, 
0x91, 0xF3, 0x83, 0x42, 0x59, 0x5D, 0x2F, 0x1B, 0x98, 0x63, 0xC7, 0x9D, 0x35, 0xC8, 0x07, 0x1A, 
0xDA, 0xA6, 0x67, 0x96, 0x48, 0x13, 0x54, 0xE9, 0x96, 0x48, 0xD7, 0xF4, 0xA2, 0x32, 0xE8, 0xC7, 
0x19, 0x00, 0xED, 0xDD, 0xD3, 0x27, 0x2B, 0xD0, 0x15, 0x57, 0xDC, 0x94, 0xBD, 0xA7, 0xDE, 0x44, 
0xF6, 0xF6, 0xA3, 0xEC, 0x78, 0x36, 0x9D, 0x36, 0xC8, 0x46, 0xAD, 0xC6, 0x79, 0x06, 0x3E, 0x8C, 
0x0D, 0xAC, 0xD9, 0x20, 0x66, 0x3F, 0xF2, 0xDD, 0x09, 0xA3, 0xBC, 0x58, 0x48, 0xF3, 0x42, 0x76, 
0xDC, 0xF7, 0x43, 0x9B, 0x86, 0x20, 0x49, 0x30, 0x05, 0x0F, 0x76, 0x1D, 0x9B, 0x3C, 0xDF, 0xDC, 
0xDC, 0x14, 0x55, 0xA6, 0x75, 0x3D, 0x0C, 0xFD, 0x89, 0x67, 0x97, 0x2D, 0x1F, 0xCC, 0xDA, 0x20, 
0xCF, 0x0F, 0x5E, 0xE0, 0x87, 0xD7, 0xDA, 0x4E, 0x04, 0xCE, 0x0F, 0xD2, 0x7A, 0xBE, 0x47, 0x25, 
0xAB, 0x69, 0x39, 0x1A, 0x99, 0xB6, 0x7F, 0xDB, 0x20, 0x35, 0xF8, 0xE0, 0x80, 0x49, 0x38, 0xEC, 
0x9B, 0x05, 0x52, 0x2B, 0xC9, 0xFF, 0x95, 0x4D, 0x52, 0x7C, 0x98, 0x12, 0x22, 0x7D, 0xD0, 0xB2, 
0xEE, 0x96, 0x5B, 0xAF, 0xD1, 0xF7, 0x5D, 0x5B, 0x68, 0x22, 0xAD, 0x08, 0x32, 0x71, 0xA5, 0x2E, 
0x5C, 0x27, 0x02, 0xEE, 0x68, 0x37, 0x4D, 0x3E, 0xE6, 0x07, 0x20, 0x98, 0xA6, 0x03, 0xF1, 0x3C, 
0x06, 0x57, 0x70, 0x3C, 0xF5, 0x26, 0x6D, 0x26, 0x5E, 0xE7, 0x7B, 0x70, 0x1D, 0x65, 0xDB, 0x58, 
0xB9, 0x21, 0x75, 0x4D, 0xE6, 0xDC, 0x88, 0x3E, 0xC0, 0x25, 0x85, 0xE3, 0x35, 0xC8, 0x96, 0xB2, 
0xB7, 0x35, 0x09, 0x23, 0xD4, 0x5E, 0xE0, 0x3B, 0xC0, 0x28, 0xCC, 0xE5, 0x1B, 0x05, 0xA6, 0x27, 
0x39, 0x2B, 0x5D, 0x2B, 0x33, 0xC4, 0x8A, 0x76, 0x3C, 0xD7, 0xF1, 0x68, 0xB9, 0xEF, 0xC2, 0x94, 
0x4C, 0xCB, 0xBA, 0xC5, 0x7B, 0xCA, 0x93, 0xB6, 0x31, 0xF2, 0x6F, 0x68, 0x28, 0x39, 0x27, 0x06, 
0x8D, 0xD9, 0x2F, 0x6E, 0x93, 0x27, 0x52, 0xA7, 0xD3, 0x89, 0xDB, 0xB0, 0x1B, 0x4D, 0xDF, 0x69, 
0x1D, 0xE6, 0x6A, 0x3F, 0x16, 0x76, 0x5B, 0x13, 0x16, 0x99, 0x24, 0x2A, 0xD5, 0x55, 0xFF, 0x00, 
0x9E, 0x09, 0x0B, 0xC7, 0x0B, 0x26, 0x6C, 0xCE, 0x30, 0x29, 0xAF, 0xF7, 0x03, 0xD3, 0x82, 0x99, 
0xAE, 0xDB, 0x15, 0x5A, 0xCA, 0x36, 0xE8, 0x5C, 0xC8, 0x36, 0x1C, 0x9B, 0x2E, 0x77, 0xC7, 0xE5, 
0x53, 0x90, 0x90, 0xF2, 0xD8, 0xFF, 0x51, 0x16, 0x90, 0x45, 0x5D, 0x6A, 0x31, 0x6D, 0x9C, 0xE0, 
0xA4, 0xFD, 0x6B, 0x87, 0x2D, 0xA8, 0xCD, 0x2F, 0xCD, 0x9A, 0x9C, 0xDB, 0x59, 0x40, 0x15, 0x4C, 
0x8F, 0x2D, 0xE9, 0x47, 0xB1, 0x23, 0x0C, 0x5C, 0x9A, 0xA8, 0xD0, 0xA5, 0xE6, 0xE0, 0x04, 0x50, 
0x35, 0x65, 0x89, 0x72, 0xDF, 0x67, 0xCC, 0x1F, 0x37, 0xD4, 0x2C, 0x4F, 0x54, 0x2B, 0x66, 0xE6, 
0xF6, 0x42, 0xD7, 0x5C, 0xE6, 0x6F, 0x73, 0x12, 0x81, 0x9B, 0x30, 0x07, 0xC0, 0xB7, 0x6C, 0xBA, 
0xCE, 0x10, 0x34, 0x3E, 0x76, 0x6C, 0xDB, 0xA5, 0x3B, 0x59, 0x5F, 0x9B, 0x84, 0x6E, 0x61, 0xD5, 
0x36, 0x99, 0xD9, 0x70, 0xC6, 0x10, 0x03, 0xAB, 0x81, 0x37, 0xDC, 0xE9, 0x9B, 0x11, 0xDD, 0xDA, 
0x2C, 0x39, 0x1F, 0x5A, 0xA7, 0x17, 0xB7, 0xB5, 0xE3, 0x37, 0x43, 0xBF, 0x09, 0xFF, 0x4E, 0xBA, 
0x97, 0xA3, 0xCE, 0xE5, 0x10, 0x9E, 0x5A, 0xF8, 0xDA, 0x3C, 0x6F, 0x37, 0xCF, 0xE1, 0xAB, 0xBD, 
0xBE, 0xF6, 0x6D, 0xF0, 0x1D, 0x0B, 0x5A, 0x6F, 0xEC, 0x56, 0xEF, 0xB2, 0xD3, 0x6C, 0x1E, 0x57, 
0x8F, 0x4E, 0x6E, 0x3F, 0x1E, 0x6F, 0x61, 0x75, 0xCB, 0xAD, 0x5D, 0x7C, 0x18, 0xD5, 0x2E, 0xEB, 
0x2F, 0xC7, 0xF6, 0xA1, 0x3D, 0xB2, 0xC6, 0x97, 0xCD, 0xF3, 0x8F, 0x17, 0x37, 0x57, 0xE3, 0xCB, 
0x61, 0xF7, 0xE3, 0xFA, 0xE8, 0x73, 0xFD, 0x43, 0xF7, 0xF3, 0xC7, 0x83, 0x6B, 0xFA, 0xE9, 0xF0, 
0xED, 0xE7, 0xDE, 0x2D, 0x34, 0xD8, 0xF7, 0xBB, 0x97, 0x17, 0xAD, 0x0F, 0xAD, 0xE1, 0xE7, 0x96, 
0xD5, 0x99, 0xF6, 0xDD, 0x93, 0xD6, 0x9B, 0x66, 0xBF, 0x59, 0xB7, 0x28, 0x1D, 0xF6, 0x2E, 0x5A, 
0x93, 0xA3, 0xE3, 0xD3, 0xA1, 0xE3, 0x8C, 0xBA, 0x9F, 0x4F, 0x7A, 0x56, 0xFB, 0xC5, 0xBB, 0xCB, 
0xC3, 0xA6, 0x33, 0x3A, 0x79, 0x7B, 0x51, 0xBB, 0x7E, 0x73, 0xDC, 0xDE, 0xB7, 0xAE, 0xDE, 0x5E, 
0x6D, 0xED, 0x6F, 0x54, 0x7F, 0xFF, 0xFD, 0xBD, 0x7D, 0xEA, 0x78, 0xBD, 0x9B, 0x1F, 0xCD, 0x61, 
0xFB, 0x76, 0x7B, 0x16, 0xF5, 0x46, 0x47, 0x37, 0x5E, 0xF5, 0x83, 0xFF, 0xED, 0x68, 0xF6, 0x1E, 
0x7E, 0xCE, 0xCE, 0xD6, 0xFA, 0xDD, 0xF5, 0xE8, 0xF2, 0xFC, 0xE8, 0x43, 0x3D, 0x7A, 0xF9, 0x22, 
0x68, 0xED, 0xEF, 0xDF, 0x8C, 0xFB, 0x67, 0xD5, 0xB1, 0x7D, 0x3D, 0x60, 0xDB, 0x1B, 0x2C, 0xB8, 
0x1A, 0x4E, 0x3E, 0x7F, 0x7F, 0xF1, 0x76, 0x54, 0x3D, 0xA5, 0xE6, 0xD5, 0x68, 0x6D, 0xF6, 0x63, 
0xB6, 0x3D, 0xEA, 0x1D, 0xDE, 0x9C, 0xB8, 0xE6, 0xF4, 0xE4, 0xC4, 0xFA, 0x31, 0x5E, 0x73, 0xCD, 
0x97, 0xA7, 0x3D, 0xD7, 0x0C, 0xD7, 0x2F, 0xED, 0x66, 0x75, 0xAD, 0x5D, 0x6F, 0x6E, 0xB2, 0xF0, 
0xA2, 0xED, 0xED, 0x6F, 0x7C, 0xEB, 0x6E, 0xB7, 0x5A, 0xEB, 0x7E, 0xFF, 0x7B, 0xFD, 0xCD, 0xF5, 
0xD6, 0x9B, 0xCB, 0xAD, 0xF3, 0xFE, 0x79, 0xB3, 0xBB, 0xD9, 0xBA, 0x34, 0xAF, 0xBA, 0xE7, 0xCD, 
0xC1, 0x66, 0x7F, 0x34, 0x3A, 0x3E, 0xEE, 0x1D, 0xD8, 0xCD, 0x1F, 0x61, 0xF3, 0xF4, 0xB6, 0x39, 
0xED, 0x5C, 0x36, 0x0F, 0xD7, 0x8E, 0x3B, 0xEF, 0x6B, 0xEB, 0xDD, 0xAB, 0x8D, 0xE1, 0xFB, 0xAD, 
0xDB, 0x56, 0xD4, 0x69, 0x9E, 0xB7, 0x6A, 0xC3, 0xB7, 0x6B, 0x63, 0xF3, 0xB3, 0xDF, 0xDE, 0x18, 
0x1E, 0x6D, 0x39, 0x67, 0x57, 0x66, 0xF3, 0xA8, 0xF5, 0x36, 0x72, 0x2E, 0xC6, 0x87, 0x97, 0xB5, 
0x66, 0xF3, 0xDD, 0x29, 0x3D, 0x68, 0x6F, 0x98, 0xC7, 0x75, 0xEB, 0x23, 0xE8, 0xFF, 0xF2, 0x13, 
0xFD, 0x7D, 0xAD, 0x79, 0x7B, 0x5A, 0x73, 0xAD, 0x97, 0xB4, 0x77, 0x78, 0xD5, 0xE3, 0xD6, 0xE9, 
0xB8, 0x07, 0xBD, 0xEB, 0xEE, 0xE4, 0x7C, 0xDC, 0x6E, 0xAF, 0x16, 0xC1, 0x9B, 0xCB, 0x21, 0x0D, 
0xA8, 0xC9, 0xB2, 0xC1, 0x23, 0x99, 0x91, 0x18, 0x10, 0x6A, 0x41, 0xDA, 0x77, 0xBB, 0x10, 0x03, 
0x1E, 0xE5, 0xBB, 0x7F, 0x87, 0x9F, 0xA6, 0xA7, 0x50, 0x0A, 0x2C, 0x11, 0x10, 0x21, 0x3F, 0xB0, 
0xFC, 0xD0, 0x14, 0xC2, 0xC3, 0x50, 0x68, 0x88, 0x3D, 0xA9, 0x76, 0x7F, 0xF0, 0x14, 0x80, 0x88, 
0x0C, 0x80, 0x98, 0x9E, 0x4D, 0x0A, 0x6A, 0xF2, 0x63, 0x18, 0x90, 0x09, 0x45, 0x00, 0x89, 0x93, 
0x5B, 0xE6, 0x4C, 0x1A, 0xB5, 0xA2, 0x64, 0x2E, 0xB0, 0x87, 0x90, 0x9F, 0x22, 0xC5, 0x50, 0xCD, 
0x4C, 0xC8, 0x67, 0x64, 0x6F, 0xAA, 0xC4, 0xFE, 0x66, 0x5A, 0x90, 0x20, 0x95, 0x01, 0x32, 0xC6, 
0xF8, 0x2D, 0xB0, 0x03, 0xB2, 0xC9, 0xFE, 0x64, 0x38, 0x70, 0xA6, 0x30, 0xF8, 0x01, 0x26, 0x4A, 
0x94, 0xAC, 0x47, 0x7C, 0xA8, 0x5C, 0x32, 0x42, 0xFE, 0x50, 0x2C, 0xAF, 0xE9, 0x6C, 0x10, 0xC2, 
0xD8, 0xA2, 0x87, 0x72, 0xD4, 0xC4, 0x1A, 0x84, 0xFE, 0x58, 0x3C, 0xFD, 0x4C, 0xD2, 0xA1, 0x39, 
0x9C, 0x86, 0x3E, 0x65, 0x15, 0xF3, 0x15, 0xF5, 0x62, 0x52, 0x29, 0x23, 0x17, 0xF3, 0xF9, 0x24, 
0x70, 0x7D, 0x13, 0xB4, 0x8A, 0x81, 0xA7, 0xCB, 0x20, 0xF9, 0x5C, 0x8E, 0xE1, 0x5A, 0x00, 0x0F, 
0x85, 0x85, 0xE7, 0xA3, 0xB9, 0xB4, 0x7D, 0x5D, 0x79, 0x49, 0x0A, 0x4A, 0xEB, 0x9B, 0x69, 0x9F, 
0xCA, 0x66, 0x66, 0x39, 0x19, 0x4F, 0xFD, 0x65, 0xFD, 0x60, 0xB3, 0xA6, 0xA1, 0xF4, 0xF3, 0x83, 
0x3A, 0x7E, 0x32, 0xD1, 0x7E, 0xAB, 0xA6, 0xF9, 0xF5, 0xF3, 0x81, 0xE3, 0xD2, 0x1E, 0x78, 0x05, 
0x0C, 0x87, 0xDC, 0x37, 0x9E, 0x58, 0x52, 0xE9, 0xF6, 0x39, 0x63, 0x12, 0x5D, 0xAC, 0xD7, 0x6A, 
0xBF, 0x2C, 0xCC, 0xCB, 0x6A, 0xF8, 0x89, 0xFB, 0x8F, 0x66, 0x11, 0xA3, 0x63, 0xCC, 0x46, 0xFF, 
0x82, 0x04, 0x4A, 0xC5, 0xB2, 0x52, 0x66, 0x35, 0x9B, 0xB5, 0x5A, 0x76, 0x5E, 0x6E, 0x2F, 0xD1, 
0xDE, 0xD6, 0x8B, 0xFD, 0xE6, 0x56, 0x2A, 0xD1, 0xAC, 0x27, 0x89, 0xA6, 0xA6, 0x5B, 0x11, 0x81, 
0x31, 0xB1, 0x7B, 0x40, 0xFC, 0xCD, 0x0E, 0xF2, 0x20, 0x4C, 0xE2, 0x9F, 0x12, 0xB3, 0xAE, 0xC4, 
0x54, 0xB6, 0xDF, 0x8A, 0x05, 0x57, 0x92, 0xC4, 0xE1, 0xF7, 0xBE, 0x0C, 0xF0, 0xB9, 0xF0, 0xD2, 
0x87, 0xE8, 0x72, 0x63, 0xEB, 0x17, 0x5D, 0x79, 0x9B, 0xDC, 0x64, 0x12, 0x65, 0x14, 0x93, 0x54, 
0xB2, 0x0E, 0x56, 0x95, 0xE9, 0xBA, 0x12, 0x6B, 0x3B, 0x51, 0x50, 0xFF, 0x05, 0x7E, 0x76, 0x48, 
0xF5, 0x37, 0xF2, 0x26, 0xA4, 0x33, 0xF2, 0x5B, 0x35, 0x21, 0x2C, 0xF3, 0xFE, 0x34, 0xE2, 0x8D, 
0xCD, 0x97, 0xDB, 0x76, 0x9F, 0x13, 0xB7, 0xDC, 0x09, 0x4D, 0x13, 0x2B, 0xD3, 0x3E, 0x94, 0x3E, 
0x34, 0x6D, 0x67, 0x12, 0xC1, 0x32, 0x41, 0xFA, 0x9C, 0x54, 0x6B, 0x7D, 0x33, 0xAB, 0xD6, 0xA4, 
0x44, 0x03, 0xAF, 0x28, 0x80, 0xD5, 0x6D, 0x3D, 0xE2, 0x93, 0xCF, 0x0C, 0x63, 0x8C, 0x4A, 0xC1, 
0xB6, 0x9E, 0xC4, 0xFD, 0x91, 0xA0, 0x14, 0x36, 0x95, 0x3A, 0xAA, 0xFD, 0x02, 0x48, 0xC2, 0x42, 
0xB0, 0xFC, 0x00, 0x32, 0x33, 0x48, 0xB4, 0x7D, 0x66, 0x32, 0x5A, 0xA8, 0xD9, 0x74, 0x58, 0xDC, 
0x11, 0x48, 0x82, 0x73, 0x22, 0x97, 0x68, 0x63, 0x2B, 0x21, 0xBB, 0x93, 0xEB, 0xB8, 0x2A, 0x4F, 
0x1F, 0xD5, 0x72, 0x54, 0x2C, 0x76, 0xE1, 0xCD, 0x19, 0x90, 0x02, 0x2E, 0xEE, 0x60, 0xE1, 0xFE, 
0xE9, 0xFD, 0xBB, 0x43, 0xC6, 0x82, 0x0B, 0xFA, 0x7D, 0x42, 0x23, 0x46, 0xF6, 0xF6, 0xF6, 0x88, 
0x81, 0xB0, 0x0F, 0xE2, 0x53, 0xDB, 0x50, 0xE0, 0x9D, 0xA5, 0x22, 0x83, 0x89, 0x67, 0xE1, 0xC0, 
0x49, 0xA1, 0xA8, 0xA1, 0x27, 0x0B, 0x67, 0x20, 0x5A, 0x48, 0xD9, 0x24, 0xF4, 0x88, 0x47, 0x6F, 
0x49, 0xD3, 0xC2, 0x65, 0xC2, 0xA7, 0xD3, 0xFE, 0x37, 0xC0, 0xDB, 0x82, 0xF1, 0x3E, 0x9A, 0x8E, 
0xDD, 0x7A, 0x05, 0xB9, 0xF5, 0x7A, 0x67, 0x95, 0xAD, 0x4A, 0xCD, 0x40, 0x79, 0x89, 0x65, 0x32, 
0x6B, 0x44, 0x0A, 0xB4, 0x48, 0x7E, 0xDE, 0x3D, 0x8A, 0xD3, 0xC6, 0x5F, 0xE0, 0xE4, 0x58, 0xA1, 
0x1F, 0xF9, 0x03, 0xA6, 0x98, 0x2D, 0x64, 0x34, 0x0A, 0xFD, 0x5B, 0xCE, 0xA1, 0x13, 0x86, 0x7E, 
0x58, 0x30, 0xF8, 0xA6, 0x48, 0x1F, 0x0A, 0x61, 0x92, 0x12, 0xDB, 0x07, 0x4B, 0x7A, 0x3E, 0x23, 
0xD1, 0x24, 0xC0, 0x75, 0x7E, 0x46, 0x65, 0x15, 0x43, 0xAC, 0x01, 0xEF, 0x94, 0xFD, 0x63, 0x05, 
0x42, 0x32, 0xCA, 0x5A, 0xB3, 0x63, 0x3A, 0x2B, 0x98, 0x61, 0x68, 0xCE, 0x4A, 0x04, 0x1C, 0x43, 
0xA9, 0x5D, 0x4A, 0xCD, 0x2B, 0x2A, 0x48, 0x58, 0x50, 0xCD, 0x0A, 0x80, 0x13, 0x7D, 0x5D, 0xF5, 
0x37, 0xE0, 0x74, 0x53, 0x30, 0x8C, 0xF9, 0x05, 0xDA, 0x7F, 0xDD, 0xE1, 0xEF, 0x33, 0x78, 0xEF, 
0x8B, 0x77, 0x41, 0x24, 0xF9, 0x15, 0x0A, 0x53, 0xB2, 0x4B, 0x66, 0x45, 0xF2, 0x9A, 0x94, 0xD7, 
0x49, 0x83, 0xBF, 0xBF, 0x12, 0xEF, 0xF8, 0x5A, 0x2B, 0x4A, 0x59, 0x8B, 0x4A, 0xD8, 0xA7, 0x4F, 
0x90, 0xDD, 0xF9, 0x84, 0x4E, 0xA8, 0x2D, 0x07, 0x04, 0x43, 0xCE, 0x78, 0x81, 0x48, 0x21, 0x40, 
0x27, 0x95, 0xEF, 0x48, 0x08, 0xD5, 0x5F, 0x44, 0xBF, 0xBC, 0x2C, 0x9C, 0x78, 0x1E, 0x40, 0x0C, 
0x36, 0x32, 0xDD, 0x88, 0x26, 0x15, 0x60, 0xC7, 0x11, 0xE8, 0x09, 0x2A, 0xBC, 0x89, 0xEB, 0xAA, 
0x1E, 0x33, 0x7D, 0x55, 0x02, 0x70, 0x72, 0x1F, 0x5D, 0x96, 0xEC, 0xC9, 0x9E, 0xFE, 0x3B, 0x14, 
0x95, 0x8D, 0x58, 0x8A, 0x02, 0x94, 0xA4, 0xBC, 0x31, 0xDD, 0x2F, 0x0B, 0x27, 0x54, 0xEA, 0x41, 
0xFC, 0xC6, 0x59, 0xF0, 0x0C, 0xDA, 0xC0, 0x64, 0x8D, 0x98, 0xE9, 0x59, 0x38, 0x1D, 0x84, 0x57, 
0x14, 0x65, 0x50, 0x57, 0x31, 0x5D, 0xE8, 0x4D, 0x8F, 0xE7, 0x8A, 0x07, 0xEA, 0x85, 0x8D, 0x4C, 
0x9C, 0x12, 0xD8, 0x5D, 0x8A, 0x7F, 0xAC, 0x1D, 0xF3, 0x9B, 0x39, 0x6D, 0xF7, 0x0B, 0xD3, 0x12, 
0xB1, 0xF3, 0x39, 0x27, 0x43, 0x28, 0xAA, 0x8A, 0x98, 0x42, 0xC8, 0x39, 0xAD, 0x84, 0xD4, 0xB4, 
0x67, 0x5D, 0x9C, 0xE9, 0x30, 0x49, 0xC9, 0x66, 0x31, 0xA9, 0xD7, 0x48, 0xC1, 0x0D, 0xAD, 0x09, 
0xA6, 0x38, 0x95, 0x21, 0x65, 0x1D, 0x91, 0xED, 0xB4, 0x66, 0x47, 0x76, 0xC1, 0x10, 0x50, 0x6C, 
0x14, 0x2B, 0x1C, 0x11, 0x2A, 0x12, 0x92, 0x40, 0x6C, 0x03, 0x51, 0xC9, 0xD8, 0xD1, 0x78, 0x10, 
0xBB, 0x02, 0x89, 0xA3, 0x8B, 0xB1, 0x0D, 0xFA, 0x05, 0xD5, 0xB0, 0x49, 0x54, 0x22, 0x28, 0x41, 
0x14, 0xF8, 0x5E, 0x44, 0x71, 0xBB, 0xA7, 0x98, 0x6A, 0xA0, 0x3F, 0x73, 0x6C, 0x01, 0x8D, 0x08, 
0x2F, 0x80, 0x44, 0xD3, 0x1B, 0xB2, 0x11, 0xC7, 0x95, 0x5A, 0x51, 0xA7, 0xD3, 0xA5, 0xE6, 0xC6, 
0x82, 0x26, 0x79, 0x4E, 0x12, 0xFF, 0xBB, 0xCB, 0xED, 0x45, 0x36, 0xB9, 0x97, 0xB5, 0x72, 0x17, 
0x5D, 0xB6, 0x68, 0xE4, 0x0C, 0x58, 0xA1, 0x98, 0x1E, 0x8B, 0xD6, 0x4D, 0xFC, 0x78, 0x17, 0x5B, 
0x5E, 0x3C, 0x3C, 0x42, 0xCB, 0x3C, 0x55, 0x37, 0x76, 0xB2, 0xBE, 0x83, 0x7E, 0x6F, 0xA8, 0x62, 
0x1C, 0x14, 0x88, 0x59, 0x09, 0x4C, 0x08, 0x0C, 0x91, 0xEE, 0x96, 0x07, 0x00, 0xF4, 0xFB, 0xB0, 
0x9A, 0xCC, 0xBA, 0x0F, 0x36, 0x4F, 0x5A, 0xA4, 0x1D, 0x94, 0x82, 0x06, 0x97, 0xB0, 0xCC, 0xF7, 
0x74, 0x88, 0x28, 0xA4, 0x80, 0x82, 0x01, 0x6A, 0xE0, 0x7E, 0x6D, 0xD2, 0x76, 0x91, 0x67, 0x06, 
0x22, 0x66, 0x18, 0x0B, 0x1C, 0x12, 0x44, 0x5C, 0xDB, 0x13, 0x32, 0x8C, 0x29, 0x1B, 0xF9, 0xB6, 
0x20, 0x7F, 0xD3, 0xE9, 0x19, 0xC5, 0xD7, 0xC6, 0x6B, 0xA3, 0x61, 0xE8, 0xBE, 0xA7, 0x29, 0x1F, 
0xC5, 0x5F, 0xC6, 0xD2, 0xF8, 0x75, 0x41, 0x43, 0x5E, 0x2B, 0xF6, 0xA1, 0x2F, 0x2F, 0x8E, 0xDA, 
0xFE, 0x18, 0x9C, 0x16, 0x0C, 0x54, 0x40, 0x5C, 0x25, 0x6B, 0xC4, 0xD8, 0x33, 0xE0, 0x77, 0x4E, 
0x7D, 0x32, 0x54, 0x0E, 0x99, 0x89, 0x57, 0xDC, 0xE5, 0x4D, 0xFC, 0x2C, 0x76, 0x41, 0x58, 0x48, 
0x23, 0x7E, 0x41, 0x31, 0xD0, 0x29, 0x2B, 0xBE, 0xC7, 0xE7, 0x31, 0x4E, 0x2A, 0x6A, 0x8D, 0x4C, 
0x6F, 0x88, 0x38, 0x29, 0xF1, 0x41, 0x27, 0x2C, 0xA1, 0xE6, 0x8B, 0x19, 0xBF, 0x98, 0x53, 0x60, 
0xC6, 0x78, 0xE9, 0x9E, 0x02, 0xEA, 0x69, 0xAD, 0x38, 0xC3, 0xCA, 0x24, 0x74, 0xD7, 0x80, 0x37, 
0x42, 0x61, 0x32, 0xBE, 0x54, 0xB3, 0x88, 0x7A, 0x76, 0x2C, 0xBA, 0xE6, 0x49, 0x8F, 0xE9, 0x2A, 
0xDB, 0x91, 0x70, 0x17, 0xCD, 0x07, 0x71, 0x01, 0xA4, 0xCD, 0x5D, 0xCD, 0xC8, 0x19, 0x99, 0x98, 
0x54, 0xEA, 0x21, 0xC5, 0xF9, 0x55, 0x30, 0xDA, 0x62, 0x0F, 0xBD, 0x8C, 0x11, 0xC1, 0x28, 0x11, 
0xC3, 0x0C, 0x02, 0x17, 0x56, 0xBB, 0x08, 0xA1, 0xD5, 0x69, 0xF9, 0xF6, 0xF6, 0xB6, 0x8C, 0xA9, 
0x51, 0x19, 0x64, 0x90, 0x07, 0x12, 0x86, 0x66, 0xCE, 0xC5, 0xE3, 0x0E, 0x52, 0x03, 0xBF, 0x2B, 
0xE1, 0x6F, 0xFC, 0x89, 0x78, 0xE2, 0x99, 0x06, 0xE9, 0x9F, 0x89, 0x6D, 0xF4, 0x40, 0x93, 0x6B, 
0x93, 0x7C, 0x5C, 0xBB, 0xCB, 0x70, 0x50, 0xDE, 0xF4, 0xEB, 0xAF, 0x69, 0xD1, 0x34, 0xE4, 0xDF, 
0x8D, 0x81, 0x3F, 0xDF, 0x12, 0x66, 0x1F, 0x93, 0x84, 0x05, 0xA3, 0x80, 0x24, 0x5F, 0x1B, 0x84, 
0xB2, 0x15, 0xB7, 0x93, 0xF0, 0xFB, 0x12, 0x51, 0xB8, 0x3F, 0x17, 0x46, 0x05, 0x60, 0x06, 0x93, 
0x68, 0x54, 0xF8, 0x89, 0x4D, 0x1A, 0xBC, 0x99, 0xE0, 0xD1, 0x50, 0xAC, 0x04, 0x97, 0x46, 0x96, 
0x59, 0x43, 0x3D, 0x88, 0x8C, 0x42, 0x8D, 0xF9, 0xD9, 0xBD, 0x6A, 0xD3, 0x30, 0x3B, 0x16, 0x21, 
0x83, 0xD9, 0xA9, 0xC5, 0x35, 0xE2, 0x96, 0x6C, 0x12, 0xC9, 0x39, 0x99, 0xC9, 0x23, 0xB8, 0x6A, 
0xB4, 0xE4, 0xCB, 0x02, 0xDD, 0x32, 0x7A, 0x20, 0xD7, 0xAE, 0x05, 0xB9, 0x3F, 0xA0, 0x92, 0x19, 
0x1E, 0xDC, 0xA1, 0xFC, 0xC2, 0xF7, 0x31, 0xC0, 0xC7, 0xA8, 0x2F, 0x5A, 0x49, 0xE0, 0x2F, 0x18, 
0xB6, 0x73, 0x23, 0xDD, 0x4B, 0x11, 0x57, 0x2C, 0xD7, 0x8C, 0x22, 0xDC, 0x5F, 0x41, 0x78, 0x67, 
0x37, 0x13, 0x01, 0x55, 0x8B, 0xC2, 0x86, 0xEA, 0xB6, 0x02, 0x6E, 0x0C, 0x6E, 0xD8, 0x1E, 0x39, 
0xAE, 0x5D, 0x50, 0xBC, 0x84, 0xC4, 0x5A, 0x36, 0x81, 0x31, 0x66, 0xDF, 0xBF, 0xF5, 0xF0, 0xBB, 
0x10, 0x98, 0x6C, 0xA4, 0x1B, 0x6B, 0x51, 0x17, 0xAB, 0xB6, 0x6C, 0x51, 0xE6, 0x8B, 0x8E, 0x55, 
0x88, 0x50, 0xA1, 0x85, 0xC2, 0x55, 0xA9, 0xED, 0xB0, 0xD7, 0xAA, 0x96, 0x63, 0x23, 0xF2, 0xD4, 
0x37, 0x56, 0xE2, 0x9E, 0x61, 0x8D, 0xEF, 0xA2, 0xAE, 0x70, 0xEF, 0x42, 0x09, 0x5D, 0x22, 0x59, 
0x11, 0x50, 0x6B, 0xB8, 0x75, 0xBD, 0x44, 0x63, 0x13, 0x37, 0x9E, 0x8F, 0x92, 0x4D, 0x6A, 0xE8, 
0xD8, 0x5A, 0xD5, 0x23, 0x37, 0x53, 0x74, 0xBF, 0x98, 0x9F, 0xEB, 0xC4, 0xFC, 0xB0, 0x6D, 0x8A, 
0x99, 0x68, 0xAC, 0xB4, 0x48, 0x48, 0xB5, 0x4A, 0xDA, 0xBC, 0x35, 0x51, 0x83, 0xC6, 0x71, 0x51, 
0x22, 0x0F, 0x04, 0xC0, 0xA7, 0xBD, 0x09, 0x84, 0x07, 0x58, 0x36, 0x24, 0x02, 0x28, 0x4A, 0x1C, 
0xFC, 0x23, 0xC5, 0xD0, 0x59, 0x28, 0x22, 0xBD, 0xAC, 0xE2, 0x78, 0x1E, 0x0D, 0x0F, 0x7B, 0xEF, 
0xDF, 0xA1, 0x55, 0x76, 0xF1, 0x24, 0xE2, 0x95, 0xB2, 0x32, 0x2C, 0xE3, 0xF0, 0x35, 0x9D, 0x3D, 
0xC0, 0x38, 0x2E, 0xE8, 0xD0, 0xE1, 0x99, 0xB8, 0x05, 0xE0, 0x77, 0x4D, 0x20, 0x9C, 0xD8, 0x2E, 
0xBC, 0x61, 0x0C, 0x7F, 0xD8, 0xD8, 0x52, 0x02, 0xF8, 0x9E, 0x60, 0x93, 0xA4, 0xF5, 0xB0, 0xFA, 
0xC9, 0x4C, 0xCB, 0x79, 0xDF, 0x4B, 0x81, 0x7B, 0xAC, 0x98, 0xBE, 0x6F, 0xCF, 0x34, 0x17, 0x8C, 
0x5A, 0xB3, 0xB6, 0x9A, 0x11, 0x85, 0x55, 0xED, 0xE8, 0x05, 0xFC, 0x50, 0x26, 0x88, 0xAF, 0xB4, 
0xF4, 0x50, 0x8B, 0x03, 0x69, 0x8E, 0x21, 0x1D, 0xFB, 0x37, 0x54, 0x28, 0x54, 0x4D, 0x9A, 0x2C, 
0xAE, 0xDF, 0x65, 0xB5, 0xA4, 0xAC, 0x0D, 0x0D, 0xE0, 0xEB, 0x7E, 0x5B, 0x73, 0xBA, 0xBF, 0x62, 
0xE9, 0x98, 0x41, 0x6C, 0xE7, 0xB8, 0x24, 0xD7, 0xCA, 0xBC, 0xF6, 0x31, 0x36, 0x7E, 0xC0, 0x88, 
0xB4, 0xAE, 0x1F, 0x62, 0x5F, 0x0C, 0x22, 0x42, 0x9E, 0xFF, 0xD7, 0xD6, 0xCD, 0x02, 0x53, 0x34, 
0xF2, 0x6F, 0xDB, 0x49, 0xBF, 0x05, 0x7A, 0x93, 0x8B, 0x4C, 0x89, 0x33, 0x60, 0x68, 0x00, 0xD8, 
0xD6, 0xAC, 0xEE, 0xDC, 0x48, 0x06, 0x64, 0xEF, 0x7E, 0x9C, 0x17, 0x6D, 0x22, 0x2B, 0xF4, 0x5D, 
0xB7, 0xE7, 0x07, 0xBA, 0xA3, 0xF0, 0x91, 0x24, 0x35, 0xAF, 0x17, 0xD6, 0x34, 0x92, 0x1A, 0xF5, 
0x20, 0x7B, 0x4A, 0x88, 0xE6, 0x3A, 0x7B, 0x47, 0x07, 0x6C, 0x41, 0x6F, 0xBC, 0x2A, 0xBF, 0x3B, 
0x5E, 0x75, 0x6F, 0x7F, 0x48, 0xA5, 0x75, 0xE8, 0x8A, 0xAE, 0xB8, 0x2A, 0x21, 0x9E, 0x39, 0xF0, 
0xF5, 0x09, 0x82, 0x43, 0x2E, 0x2D, 0xE3, 0x3A, 0xD0, 0x49, 0xAF, 0x62, 0xD2, 0x64, 0x18, 0x89, 
0x8E, 0x53, 0xF1, 0x31, 0xE5, 0x31, 0xF3, 0xA4, 0xD9, 0x95, 0xD4, 0x2A, 0x5F, 0x49, 0x2D, 0x24, 
0x94, 0x62, 0xF3, 0xAF, 0x35, 0xB2, 0x1A, 0x4C, 0x17, 0x52, 0x0A, 0xA1, 0xF1, 0x77, 0x8A, 0x2E, 
0x76, 0x15, 0x98, 0x34, 0x6E, 0x94, 0x9E, 0x58, 0xB7, 0x0E, 0xF8, 0x32, 0x9F, 0x6F, 0x63, 0x7E, 
0x09, 0x01, 0x29, 0x53, 0x41, 0x31, 0xE9, 0x44, 0x7A, 0x5F, 0x96, 0x69, 0x17, 0x3C, 0x35, 0xCD, 
0x34, 0x13, 0xB7, 0xB9, 0xD9, 0x52, 0x70, 0x12, 0xB3, 0xD4, 0x7D, 0x8F, 0x6F, 0x4E, 0xA2, 0x27, 
0x24, 0xA3, 0xF2, 0x07, 0x03, 0x48, 0x94, 0x3F, 0x62, 0x85, 0x46, 0x28, 0x36, 0x2D, 0xF3, 0x28, 
0x0F, 0x79, 0xCD, 0x42, 0xBC, 0x91, 0x48, 0x33, 0xA7, 0x3C, 0xDF, 0x1B, 0xFB, 0x93, 0x88, 0xFA, 
0x13, 0xB6, 0x14, 0x49, 0x10, 0x30, 0x68, 0xEC, 0x37, 0xBB, 0xC2, 0x20, 0xFF, 0xFA, 0x17, 0x49, 
0xCA, 0x5E, 0x91, 0x82, 0xB4, 0x12, 0x1F, 0x4C, 0x51, 0xAF, 0xBD, 0x82, 0x16, 0x68, 0x99, 0x54, 
0x11, 0x34, 0x10, 0xD6, 0x12, 0x63, 0x2A, 0x2E, 0x5A, 0x91, 0xFE, 0x4D, 0x38, 0x95, 0x59, 0x74, 
0x2E, 0xC6, 0xAA, 0x79, 0x0B, 0x69, 0x80, 0x75, 0x0F, 0x72, 0x09, 0x88, 0xC1, 0xE4, 0xF3, 0x9D, 
0x3C, 0x91, 0xE3, 0xC0, 0x5B, 0xE2, 0xB7, 0x86, 0xE6, 0xB2, 0x2A, 0x20, 0x79, 0x60, 0x50, 0x02, 
0xCA, 0x8A, 0x03, 0x4B, 0x45, 0xEE, 0x85, 0xA0, 0x32, 0x64, 0xB7, 0xC3, 0xAF, 0xD1, 0xAC, 0x24, 
0x28, 0x88, 0x97, 0xB6, 0x30, 0xEA, 0xF0, 0x68, 0x82, 0x2F, 0x1E, 0x3F, 0x54, 0x88, 0xBB, 0x33, 
0xFB, 0xD4, 0x5D, 0xD2, 0x1F, 0x36, 0xE5, 0x3D, 0xAE, 0x70, 0xCA, 0x74, 0xD2, 0xAB, 0x0E, 0x18, 
0x55, 0x40, 0x13, 0x24, 0x7A, 0xF8, 0xE3, 0x22, 0x29, 0xCF, 0xE3, 0x02, 0xA7, 0x72, 0x40, 0xA4, 
0xE7, 0xCC, 0x13, 0xF7, 0xE4, 0x44, 0x10, 0xC6, 0x84, 0xB2, 0xF9, 0x8C, 0x5C, 0xE6, 0x82, 0xB0, 
0x5E, 0x09, 0x39, 0x26, 0xED, 0xD3, 0x81, 0x39, 0x71, 0x93, 0x75, 0x11, 0x56, 0xE1, 0x92, 0xEE, 
0x2C, 0xF4, 0x03, 0x73, 0x68, 0x8A, 0x35, 0x5D, 0x5C, 0x37, 0x17, 0x4C, 0x4A, 0x4A, 0x9D, 0xF1, 
0xA2, 0x23, 0xBD, 0x9D, 0x8A, 0xB5, 0xCA, 0xB8, 0x0B, 0x4D, 0x8B, 0x67, 0xBE, 0xD2, 0xB4, 0x78, 
0x05, 0xE8, 0x71, 0xA6, 0x5D, 0xB9, 0xC7, 0x7E, 0x11, 0x3F, 0x58, 0x5E, 0xF9, 0x5B, 0x8C, 0x87, 
0x02, 0x1B, 0x49, 0x7D, 0x2A, 0x71, 0x29, 0x74, 0xF9, 0x2D, 0x26, 0x5C, 0x2C, 0x60, 0x97, 0xA4, 
0xCA, 0xCF, 0x74, 0x2A, 0x35, 0xDC, 0x5E, 0xB9, 0x6E, 0x15, 0x85, 0xCD, 0xEF, 0x35, 0xEC, 0x42, 
0x25, 0x66, 0xE6, 0x08, 0xAC, 0x5B, 0xDF, 0x01, 0x26, 0x81, 0xF6, 0xC2, 0x38, 0xAC, 0x97, 0x88, 
0xC3, 0xA8, 0xDC, 0x94, 0x92, 0x6A, 0x4C, 0x36, 0xD2, 0x79, 0x55, 0x89, 0xAC, 0x7A, 0x7C, 0xA5, 
0x33, 0xB7, 0xE7, 0xF6, 0xF0, 0xC5, 0x09, 0x0F, 0xBC, 0x30, 0xC0, 0xE8, 0x61, 0xE4, 0x42, 0xC0, 
0x85, 0x4B, 0x99, 0x9C, 0x6A, 0xCE, 0x3C, 0x47, 0x42, 0xB4, 0x1C, 0x1F, 0x85, 0x04, 0x26, 0x49, 
0x11, 0xEF, 0xCE, 0xF1, 0x93, 0x34, 0xA0, 0xA9, 0xED, 0xC8, 0x47, 0x00, 0x58, 0x57, 0x3E, 0xAF, 
0xAD, 0xE5, 0x61, 0x31, 0xE7, 0xF6, 0x85, 0x13, 0x7C, 0xAD, 0x88, 0x8D, 0x74, 0xDC, 0x46, 0xC2, 
0x60, 0x66, 0xE4, 0x01, 0xE9, 0x5C, 0x5A, 0xBB, 0x10, 0xA9, 0x52, 0x9C, 0x39, 0x6C, 0xE9, 0x30, 
0xC8, 0x47, 0xB8, 0x84, 0x91, 0x36, 0x2F, 0x52, 0x8C, 0xF8, 0x24, 0x99, 0x4F, 0xFF, 0x34, 0x0C, 
0x15, 0xDB, 0x07, 0x74, 0x10, 0xD2, 0x68, 0x74, 0x66, 0xF2, 0x68, 0x98, 0xBB, 0x43, 0x73, 0x3B, 
0xC2, 0x80, 0x1D, 0xAF, 0xA7, 0x2B, 0x03, 0x27, 0x8C, 0x18, 0x17, 0x25, 0xD1, 0xD3, 0x8A, 0xB6, 
0x76, 0xD7, 0xA1, 0x3D, 0xAF, 0x51, 0x7A, 0xF7, 0x06, 0x33, 0xE6, 0x37, 0x94, 0xC5, 0x94, 0x25, 
0x58, 0x52, 0x6B, 0x67, 0x3D, 0xF8, 0x0D, 0x13, 0xF6, 0xBD, 0xD8, 0xB9, 0x43, 0xFB, 0xF1, 0x2D, 
0x1E, 0x08, 0x4A, 0x29, 0x17, 0xD7, 0xF2, 0x6E, 0xB4, 0x48, 0x1E, 0xF8, 0x0F, 0xE4, 0x16, 0xB0, 
0xDC, 0xD8, 0x50, 0x3B, 0xC2, 0x31, 0x70, 0xA9, 0x7A, 0xA9, 0xEB, 0x82, 0x81, 0x4A, 0x35, 0x4A, 
0x24, 0xE6, 0x17, 0x83, 0x96, 0xD8, 0x20, 0xA9, 0xC0, 0xB4, 0x2A, 0x18, 0xFB, 0x9D, 0x77, 0x9D, 
0x5E, 0x07, 0xB7, 0xD0, 0xF8, 0x46, 0x00, 0xD2, 0x4B, 0x3E, 0x25, 0x5C, 0x3B, 0xB4, 0xFB, 0x6A, 
0xAB, 0x25, 0x8D, 0x6D, 0xB2, 0x4A, 0x13, 0x31, 0x7B, 0x90, 0xA1, 0x8E, 0x0D, 0x52, 0x87, 0x06, 
0x39, 0x7E, 0x29, 0xE8, 0xC8, 0xB3, 0x3D, 0x52, 0xAF, 0xE5, 0xAE, 0x11, 0x4C, 0x48, 0x42, 0x60, 
0x9A, 0x75, 0x2E, 0x2E, 0x4E, 0x2F, 0xBE, 0x70, 0xC4, 0x11, 0x2D, 0x00, 0x6A, 0xBE, 0x0A, 0x08, 
0xCA, 0x3F, 0x97, 0x88, 0xE3, 0xAF, 0xBE, 0x91, 0xFC, 0x53, 0xC6, 0x93, 0xA5, 0x3E, 0xB1, 0xB2, 
0x92, 0x0A, 0xFC, 0x7F, 0xC6, 0x31, 0x56, 0x56, 0xB4, 0x8D, 0xE8, 0x25, 0xAE, 0xB1, 0xC0, 0xA5, 
0x1F, 0xE8, 0x29, 0xC8, 0x54, 0x07, 0xC3, 0xB4, 0x1D, 0x74, 0xF3, 0xE2, 0x2E, 0xB1, 0x66, 0xDB, 
0x9F, 0x7C, 0x5A, 0x37, 0x44, 0x52, 0x70, 0x57, 0x42, 0xE6, 0x60, 0xC6, 0x14, 0xAB, 0x3C, 0x6B, 
0xE7, 0x90, 0xFD, 0x7D, 0x96, 0xDF, 0x5B, 0x6C, 0xF9, 0x5C, 0xDC, 0x7F, 0xDB, 0x3D, 0x3D, 0xC1, 
0x7D, 0xFA, 0x88, 0x16, 0x52, 0x3D, 0x2C, 0x55, 0xEC, 0x12, 0x53, 0x48, 0xF1, 0xE5, 0xE9, 0xDD, 
0xDD, 0x82, 0xED, 0xC1, 0x4B, 0x79, 0x6D, 0x27, 0xD9, 0xF6, 0x52, 0x17, 0x5E, 0xD4, 0x66, 0x61, 
0x12, 0x96, 0x25, 0x26, 0x91, 0xFE, 0x84, 0x31, 0xDF, 0xC3, 0x3A, 0xB1, 0x31, 0xC9, 0x4B, 0x5B, 
0xBC, 0x70, 0x49, 0x3C, 0x11, 0xAD, 0x62, 0xE1, 0xB4, 0x46, 0xA9, 0x18, 0xBC, 0x7A, 0x21, 0x7B, 
0x41, 0x15, 0xAD, 0xFE, 0xF9, 0xED, 0xC5, 0x14, 0xE7, 0x62, 0x1C, 0xB0, 0x97, 0xEF, 0x38, 0xCC, 
0x8F, 0x2C, 0x2D, 0xE0, 0xC2, 0x2D, 0x86, 0x9F, 0xF1, 0x5A, 0x89, 0xEB, 0x4C, 0x87, 0xED, 0xC2, 
0x1C, 0x58, 0x4A, 0x35, 0xE2, 0xA9, 0x82, 0x58, 0x6C, 0xC9, 0xBB, 0xAE, 0x42, 0x8F, 0x58, 0x8C, 
0x16, 0x39, 0xC2, 0xC2, 0x25, 0x7A, 0xE4, 0x8D, 0xA4, 0x1A, 0x53, 0x6D, 0x64, 0xF4, 0x93, 0xB1, 
0x2F, 0xA7, 0x7E, 0x0C, 0xB9, 0xA2, 0x13, 0xF0, 0xFD, 0x9F, 0x64, 0xBB, 0x3E, 0x4D, 0xC2, 0x53, 
0x6B, 0x43, 0xDC, 0xE5, 0x92, 0xB7, 0xC9, 0x1E, 0xB1, 0xC5, 0x9B, 0xE2, 0xA9, 0x67, 0x01, 0x89, 
0x12, 0x44, 0x17, 0x19, 0x57, 0x12, 0x85, 0x7F, 0xCE, 0x93, 0xF4, 0x36, 0x69, 0x47, 0x12, 0xAE, 
0xFD, 0x08, 0x17, 0xD2, 0x59, 0x16, 0x13, 0xF3, 0x2D, 0xF1, 0x9F, 0xB9, 0xD1, 0xA4, 0xA4, 0xBA, 
0xCF, 0x7B, 0x10, 0x34, 0xD2, 0x66, 0x40, 0x0B, 0x46, 0x79, 0x47, 0xCC, 0x31, 0x8A, 0x2C, 0x3F, 
0xB9, 0x57, 0xB1, 0x11, 0xBA, 0xCC, 0x61, 0xFC, 0xA5, 0x26, 0xF2, 0x19, 0x2D, 0x19, 0xE4, 0xFB, 
0x43, 0xA4, 0x5A, 0x78, 0xDD, 0xF8, 0x47, 0xA5, 0xF0, 0xE5, 0x9F, 0x95, 0xAF, 0x6B, 0xC5, 0xE2, 
0xEB, 0xFF, 0xAA, 0x56, 0xE8, 0x94, 0x5A, 0x49, 0xE4, 0xFE, 0xB2, 0xFE, 0x55, 0x6B, 0x23, 0x3B, 
0xA8, 0x16, 0x2A, 0xBF, 0x15, 0xFF, 0x51, 0xE1, 0x8D, 0x96, 0xB4, 0x48, 0x86, 0x2A, 0x2F, 0xE8, 
0xF0, 0xE6, 0xCF, 0x60, 0x6C, 0xF1, 0xAD, 0x9C, 0xB9, 0x33, 0xDB, 0x64, 0x14, 0x9A, 0xB8, 0x77, 
0xC9, 0x94, 0x93, 0x95, 0x00, 0x79, 0x10, 0x2D, 0xE3, 0x02, 0x08, 0xA0, 0x15, 0x7E, 0x14, 0x3A, 
0x4D, 0x6F, 0x02, 0xFC, 0x95, 0x64, 0x23, 0x5F, 0x8B, 0xF7, 0x25, 0x21, 0x67, 0xA7, 0xDD, 0x5E, 
0x7E, 0x0A, 0x82, 0xB8, 0x7D, 0xE6, 0x47, 0x0C, 0x56, 0x6A, 0x16, 0x8D, 0x22, 0x79, 0x8E, 0x33, 
0x9F, 0x30, 0x0B, 0x3F, 0xEA, 0xF2, 0x89, 0xA8, 0xCF, 0x88, 0xEC, 0xF9, 0x7C, 0x7A, 0xC6, 0x2A, 
0x3E, 0x7A, 0xEB, 0xCA, 0x8D, 0xE9, 0xF2, 0xCB, 0x2B, 0xF2, 0x5C, 0xFA, 0x2E, 0x86, 0xC6, 0x54, 
0x08, 0x9E, 0x17, 0x6A, 0x71, 0xDC, 0xD3, 0xDC, 0x37, 0x2F, 0xDB, 0x89, 0xED, 0xF8, 0xB8, 0x4C, 
0x67, 0xF1, 0x19, 0xED, 0x12, 0xB4, 0x55, 0xD1, 0x51, 0xC7, 0x7D, 0x89, 0x38, 0x78, 0xBB, 0x90, 
0xDF, 0x04, 0x56, 0x68, 0xA3, 0xFE, 0xC2, 0xE7, 0x21, 0x8B, 0x49, 0x12, 0x53, 0xA7, 0x17, 0x94, 
0xAA, 0xD4, 0x48, 0xD3, 0xA4, 0x71, 0x28, 0xCA, 0x6C, 0x63, 0xC7, 0x7B, 0xDC, 0x78, 0x74, 0xAA, 
0x9D, 0x69, 0xE0, 0xAB, 0x98, 0xF9, 0x8F, 0x00, 0x2D, 0xD5, 0x77, 0x7C, 0xB7, 0x29, 0x36, 0xAB, 
0xEF, 0xB5, 0x7C, 0x7B, 0xF6, 0x0E, 0x4F, 0x36, 0x8A, 0xEA, 0xDE, 0x63, 0xA2, 0x16, 0x1E, 0x88, 
0x18, 0xBF, 0xE0, 0x9A, 0x60, 0x07, 0x6A, 0x17, 0x44, 0xCF, 0x9C, 0x22, 0x1A, 0xAA, 0xCA, 0x28, 
0xE6, 0xE8, 0x57, 0x5D, 0x00, 0x16, 0x63, 0x8C, 0xC4, 0x15, 0x60, 0x92, 0x97, 0x6A, 0x18, 0x73, 
0x77, 0x85, 0x0D, 0x2D, 0xED, 0x40, 0xF9, 0xA5, 0x2D, 0x77, 0xAB, 0xF1, 0xCD, 0x3E, 0x7C, 0x89, 
0xFF, 0x4E, 0x6E, 0x17, 0xB7, 0xAA, 0x60, 0x5C, 0xE2, 0x64, 0x4F, 0x1F, 0xDF, 0x4E, 0xFC, 0x27, 
0x6A, 0xB6, 0x73, 0x43, 0x1C, 0xA8, 0x95, 0x37, 0x57, 0x08, 0x37, 0x5B, 0xFC, 0xFA, 0x6A, 0xB7, 
0x0A, 0x04, 0x59, 0xDA, 0x79, 0xB9, 0xF2, 0xE9, 0x62, 0x3D, 0xE4, 0x57, 0x27, 0xB7, 0x59, 0x95, 
0x34, 0x50, 0x19, 0xBC, 0xEA, 0xF2, 0x62, 0x72, 0x04, 0xE5, 0x8D, 0xDD, 0x6A, 0x90, 0x54, 0xF5, 
0xC3, 0xE4, 0xD9, 0xE1, 0xC7, 0x98, 0x19, 0x36, 0xFC, 0x52, 0xAC, 0x41, 0xA2, 0xD0, 0xDA, 0x33, 
0xAA, 0x3A, 0xF7, 0xDD, 0xAA, 0xA0, 0x57, 0x12, 0xE8, 0xD2, 0x68, 0x9C, 0xD2, 0x67, 0xA4, 0xC0, 
0x08, 0xF7, 0x89, 0xF7, 0x56, 0x53, 0xD7, 0x37, 0x57, 0xD3, 0xCC, 0x76, 0xAB, 0xA8, 0x63, 0xFC, 
0x8B, 0xC5, 0xAA, 0xFC, 0xD3, 0xC5, 0xFF, 0x03, 0x49, 0xD1, 0x75, 0xEA, 0x2F, 0x39, 0x00, 0x00
};

//===============================================================
// Constructor
//===============================================================
SPIFFSEditor::SPIFFSEditor()
{
}

//===============================================================
// Returns true, if the handler can handle the request
//===============================================================
bool SPIFFSEditor::canHandle(WebServer &server, HTTPMethod method, const String &uri)
{
  ESP_LOGI(TAG, "Can handle request from %s ?", uri);

  // Check for URL '/edit'
  if (!uri.equalsIgnoreCase("/edit"))
  {
    ESP_LOGI(TAG, "URL does not contain '/edit'");
    return false;
  }

  ESP_LOGI(TAG, "URL is valid");
  return true;
}

//===============================================================
// Returns true if the handler can upload the file
//===============================================================
bool SPIFFSEditor::canRaw(WebServer &server, const String &uri)
{
  ESP_LOGI(TAG, "Can handle upload from %s ?", uri);

  // Check for URL '/edit'
  if (!uri.equalsIgnoreCase("/edit"))
  {
    ESP_LOGI(TAG, "URL does not contain '/edit'");
    return false;
  }

  ESP_LOGI(TAG, "URL is valid");
  return true;
}

//===============================================================
// Handles the request
//===============================================================
bool SPIFFSEditor::handle(WebServer &server, HTTPMethod method, const String &requestUri)
{
  ESP_LOGI(TAG, "Handle: request=%s", requestUri.c_str());

  // Check if it can handle request and uri
  if (!canHandle(server, method, requestUri))
  {
    return false;
  }

  // Get first argument
  String argName = server.argName(0);
  String argValue = server.arg(0);
  
  if (method == HTTP_GET)
  {
    if (argName == "list")
    {
      ESP_LOGI(TAG, "Handle GET 'list'");

      // Open directory
      File dir = SPIFFS.open(argValue);
      String output = "[";

      // Open first file
      File entry = dir.openNextFile();

      // Iterate through all files
      while (entry)
      {
        if (output != "[")
        {
          output += ',';
        }
        output += "{\"type\":\"file\",\"name\":\"";
        output += String(entry.name());
        output += "\",\"size\":";
        output += String(entry.size());
        output += "}";

        entry = dir.openNextFile();
      }

      dir.close();

      output += "]";
      server.send(200, "application/json", output);
      output = String();
      return true;
    }
    else if (argName == "download")
    {
      ESP_LOGI(TAG, "Handle GET 'download'");

      if (!SPIFFS.exists(argValue))
      {
        server.send(404, "text/plain; charset=utf-8", "GET: Error downloading file, file missing");
        return false;
      }
      
      // Get file name with extension and send as header
      String fileName = argValue;
      int lastSlashIndex = fileName.lastIndexOf('/');
      if (lastSlashIndex != -1)
      {
        fileName = fileName.substring(lastSlashIndex + 1);
      }
      server.sendHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");

      // Stream file
      File file = SPIFFS.open(argValue, "r");
      server.streamFile(file, "application/octet-stream");
      file.close();
      return true;
    }
    
    // Send '/edit.html'
    ESP_LOGI(TAG, "Handle GET edit page");
    server.sendHeader("Content-Encoding", "gzip");
    server.send_P(200, "text/html", (const char*)edit_html_gz, edit_html_gz_len);
    return true;
  }
  else if (method == HTTP_DELETE)
  {
    ESP_LOGI(TAG, "Handle DELETE");

    // Check for path param
    if (argName != "path")
    {
      server.send(404, "text/plain; charset=utf-8", "DELETE: Error deleting file, path parameter missing");
      return false;
    }

    // Delete file from file system
    if (!SPIFFS.remove(argValue))
    {
      server.send(404, "text/plain; charset=utf-8", "DELETE: Error deleting file, SPIFFS error");
      return false;
    }

    server.send(200, "text/plain; charset=utf-8", "DELETE: " + server.arg("path") + "successful.");
    return true;
  }
  else if (method == HTTP_POST)
  {
    // All done in upload function
    return true;
  }

  server.send(404, "text/plain; charset=utf-8", "Unknown HTTP method!");
  return false;
}

//===============================================================
// Handles the raw upload
//===============================================================
void SPIFFSEditor::raw(WebServer &server, const String &requestUri, HTTPRaw &raw)
{
  static size_t uploadSize;
  
  // Get first argument
  String argName = server.argName(0);
  String argValue = server.arg(0);

  if (argName != "path")
  {
    ESP_LOGI(TAG, "UPLOAD: Error uploading file, path parameter missing");
    server.send(404, "text/plain; charset=utf-8", "UPLOAD: Error uploading file, path parameter missing");
    return;
  }

  if (raw.status == RAW_START)
  {
    ESP_LOGI(TAG, "Start uploading file '%s'", argValue.c_str());

    // Remove file if existing
    if (SPIFFS.exists(argValue))
    {
      ESP_LOGI(TAG, "Remove existing file");
      SPIFFS.remove(argValue);
    }

    // Open the file for writing
    ESP_LOGI(TAG, "Open the file for writing");
    _fsUploadFile = SPIFFS.open(argValue, "w");
    uploadSize = 0;
  }
  else if (raw.status == RAW_WRITE)
  {
    // Write received bytes
    if (_fsUploadFile)
    {
      size_t written = _fsUploadFile.write(raw.buf, raw.currentSize);
      if (written < raw.currentSize)
      {
        // Upload failed
        ESP_LOGI(TAG, "Write error!");
        _fsUploadFile.close();
        server.send(500, "text/plain; charset=utf-8", "UPLOAD: Error uploading file!");

        // Delete file to free up space in filesystem
        SPIFFS.remove(argValue);
      }

      uploadSize += raw.currentSize;

      ESP_LOGI(TAG, "SPIFFS free:: %d of %d", SPIFFS.usedBytes(), SPIFFS.totalBytes());
      ESP_LOGI(TAG, "SPIFFS written:: %d of %d", written, raw.currentSize);
      ESP_LOGI(TAG, "SPIFFS totalSize: %d", raw.currentSize + raw.totalSize);
    }
  }
  else if (raw.status == RAW_END)
  {
    // Close the file
    if (_fsUploadFile)
    {
      ESP_LOGI(TAG, "Upload finished: %d bytes uploaded", raw.totalSize);
      _fsUploadFile.close();
      server.send(200, "text/plain; charset=utf-8", "UPLOAD: successfull.");
    }
  }
}
